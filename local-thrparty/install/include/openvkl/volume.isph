// Copyright 2019 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "common.isph"

// TODO: should be able to use "Volume" here directly, but this conflicts with
// other ispc:: namespaced OSPRay types
struct OpenVKLVolume;
typedef OpenVKLVolume *uniform VKLVolume;

VKL_API void vklComputeSample4(const int *uniform valid,
                               VKLVolume volume,
                               const varying struct vkl_vec3f *uniform
                                   objectCoordinates,
                               varying float *uniform samples);

VKL_API void vklComputeSample8(const int *uniform valid,
                               VKLVolume volume,
                               const varying struct vkl_vec3f *uniform
                                   objectCoordinates,
                               varying float *uniform samples);

VKL_API void vklComputeSample16(const int *uniform valid,
                                VKLVolume volume,
                                const varying struct vkl_vec3f *uniform
                                    objectCoordinates,
                                varying float *uniform samples);

VKL_FORCEINLINE varying float vklComputeSampleV(
    VKLVolume volume, const varying vkl_vec3f *uniform objectCoordinates)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  varying float samples;

  if (sizeof(varying float) == 16) {
    vklComputeSample4(
        (uniform int *uniform) & imask, volume, objectCoordinates, &samples);
  } else if (sizeof(varying float) == 32) {
    vklComputeSample8(
        (uniform int *uniform) & imask, volume, objectCoordinates, &samples);
  } else if (sizeof(varying float) == 64) {
    vklComputeSample16(
        (uniform int *uniform) & imask, volume, objectCoordinates, &samples);
  }

  return samples;
}

VKL_API void vklComputeGradient4(const int *uniform valid,
                                 VKLVolume volume,
                                 const varying struct vkl_vec3f *uniform
                                     objectCoordinates,
                                 varying vkl_vec3f *uniform gradients);

VKL_API void vklComputeGradient8(const int *uniform valid,
                                 VKLVolume volume,
                                 const varying struct vkl_vec3f *uniform
                                     objectCoordinates,
                                 varying vkl_vec3f *uniform gradients);

VKL_API void vklComputeGradient16(const int *uniform valid,
                                  VKLVolume volume,
                                  const varying struct vkl_vec3f *uniform
                                      objectCoordinates,
                                  varying vkl_vec3f *uniform gradients);

VKL_FORCEINLINE varying vkl_vec3f vklComputeGradientV(
    VKLVolume volume, const varying vkl_vec3f *uniform objectCoordinates)
{
  varying bool mask = __mask;
  unmasked
  {
    varying int imask = mask ? -1 : 0;
  }

  varying vkl_vec3f gradients;

  if (sizeof(varying float) == 16) {
    vklComputeGradient4(
        (uniform int *uniform) & imask, volume, objectCoordinates, &gradients);
  } else if (sizeof(varying float) == 32) {
    vklComputeGradient8(
        (uniform int *uniform) & imask, volume, objectCoordinates, &gradients);
  } else if (sizeof(varying float) == 64) {
    vklComputeGradient16(
        (uniform int *uniform) & imask, volume, objectCoordinates, &gradients);
  }

  return gradients;
}

VKL_API uniform vkl_box3f vklGetBoundingBox(VKLVolume volume);
